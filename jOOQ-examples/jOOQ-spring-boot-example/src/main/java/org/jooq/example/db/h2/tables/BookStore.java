/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.example.db.h2.Keys;
import org.jooq.example.db.h2.Public;
import org.jooq.example.db.h2.tables.Book.BookPath;
import org.jooq.example.db.h2.tables.BookToBookStore.BookToBookStorePath;
import org.jooq.example.db.h2.tables.records.BookStoreRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookStore extends TableImpl<BookStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.BOOK_STORE</code>
     */
    public static final BookStore BOOK_STORE = new BookStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookStoreRecord> getRecordType() {
        return BookStoreRecord.class;
    }

    /**
     * The column <code>PUBLIC.BOOK_STORE.NAME</code>.
     */
    public final TableField<BookStoreRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(400).nullable(false), this, "");

    private BookStore(Name alias, Table<BookStoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BookStore(Name alias, Table<BookStoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK_STORE</code> table reference
     */
    public BookStore(String alias) {
        this(DSL.name(alias), BOOK_STORE);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK_STORE</code> table reference
     */
    public BookStore(Name alias) {
        this(alias, BOOK_STORE);
    }

    /**
     * Create a <code>PUBLIC.BOOK_STORE</code> table reference
     */
    public BookStore() {
        this(DSL.name("BOOK_STORE"), null);
    }

    public <O extends Record> BookStore(Table<O> path, ForeignKey<O, BookStoreRecord> childPath, InverseForeignKey<O, BookStoreRecord> parentPath) {
        super(path, childPath, parentPath, BOOK_STORE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BookStorePath extends BookStore implements Path<BookStoreRecord> {
        public <O extends Record> BookStorePath(Table<O> path, ForeignKey<O, BookStoreRecord> childPath, InverseForeignKey<O, BookStoreRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BookStorePath(Name alias, Table<BookStoreRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BookStorePath as(String alias) {
            return new BookStorePath(DSL.name(alias), this);
        }

        @Override
        public BookStorePath as(Name alias) {
            return new BookStorePath(alias, this);
        }

        @Override
        public BookStorePath as(Table<?> alias) {
            return new BookStorePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BookStoreRecord> getPrimaryKey() {
        return Keys.UK_T_BOOK_STORE_NAME;
    }

    private transient BookToBookStorePath _bookToBookStore;

    /**
     * Get the implicit to-many join path to the
     * <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table
     */
    public BookToBookStorePath bookToBookStore() {
        if (_bookToBookStore == null)
            _bookToBookStore = new BookToBookStorePath(this, null, Keys.FK_B2BS_BS_NAME.getInverseKey());

        return _bookToBookStore;
    }

    /**
     * Get the implicit many-to-many join path to the <code>PUBLIC.BOOK</code>
     * table
     */
    public BookPath book() {
        return bookToBookStore().book();
    }

    @Override
    public BookStore as(String alias) {
        return new BookStore(DSL.name(alias), this);
    }

    @Override
    public BookStore as(Name alias) {
        return new BookStore(alias, this);
    }

    @Override
    public BookStore as(Table<?> alias) {
        return new BookStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookStore rename(String name) {
        return new BookStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookStore rename(Name name) {
        return new BookStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookStore rename(Table<?> name) {
        return new BookStore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookStore where(Condition condition) {
        return new BookStore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookStore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookStore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookStore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookStore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookStore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookStore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookStore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookStore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookStore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
