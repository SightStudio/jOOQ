/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.example.db.h2.Keys;
import org.jooq.example.db.h2.Public;
import org.jooq.example.db.h2.tables.Book.BookPath;
import org.jooq.example.db.h2.tables.BookStore.BookStorePath;
import org.jooq.example.db.h2.tables.records.BookToBookStoreRecord;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BookToBookStore extends TableImpl<BookToBookStoreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.BOOK_TO_BOOK_STORE</code>
     */
    public static final BookToBookStore BOOK_TO_BOOK_STORE = new BookToBookStore();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BookToBookStoreRecord> getRecordType() {
        return BookToBookStoreRecord.class;
    }

    /**
     * The column <code>PUBLIC.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME</code>.
     */
    public final TableField<BookToBookStoreRecord, String> BOOK_STORE_NAME = createField(DSL.name("BOOK_STORE_NAME"), SQLDataType.VARCHAR(400).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BOOK_TO_BOOK_STORE.BOOK_ID</code>.
     */
    public final TableField<BookToBookStoreRecord, Integer> BOOK_ID = createField(DSL.name("BOOK_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.BOOK_TO_BOOK_STORE.STOCK</code>.
     */
    public final TableField<BookToBookStoreRecord, Integer> STOCK = createField(DSL.name("STOCK"), SQLDataType.INTEGER, this, "");

    private BookToBookStore(Name alias, Table<BookToBookStoreRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BookToBookStore(Name alias, Table<BookToBookStoreRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table reference
     */
    public BookToBookStore(String alias) {
        this(DSL.name(alias), BOOK_TO_BOOK_STORE);
    }

    /**
     * Create an aliased <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table reference
     */
    public BookToBookStore(Name alias) {
        this(alias, BOOK_TO_BOOK_STORE);
    }

    /**
     * Create a <code>PUBLIC.BOOK_TO_BOOK_STORE</code> table reference
     */
    public BookToBookStore() {
        this(DSL.name("BOOK_TO_BOOK_STORE"), null);
    }

    public <O extends Record> BookToBookStore(Table<O> path, ForeignKey<O, BookToBookStoreRecord> childPath, InverseForeignKey<O, BookToBookStoreRecord> parentPath) {
        super(path, childPath, parentPath, BOOK_TO_BOOK_STORE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BookToBookStorePath extends BookToBookStore implements Path<BookToBookStoreRecord> {
        public <O extends Record> BookToBookStorePath(Table<O> path, ForeignKey<O, BookToBookStoreRecord> childPath, InverseForeignKey<O, BookToBookStoreRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BookToBookStorePath(Name alias, Table<BookToBookStoreRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BookToBookStorePath as(String alias) {
            return new BookToBookStorePath(DSL.name(alias), this);
        }

        @Override
        public BookToBookStorePath as(Name alias) {
            return new BookToBookStorePath(alias, this);
        }

        @Override
        public BookToBookStorePath as(Table<?> alias) {
            return new BookToBookStorePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BookToBookStoreRecord> getPrimaryKey() {
        return Keys.PK_B2BS;
    }

    @Override
    public List<ForeignKey<BookToBookStoreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_B2BS_BS_NAME, Keys.FK_B2BS_B_ID);
    }

    private transient BookStorePath _bookStore;

    /**
     * Get the implicit join path to the <code>PUBLIC.BOOK_STORE</code> table.
     */
    public BookStorePath bookStore() {
        if (_bookStore == null)
            _bookStore = new BookStorePath(this, Keys.FK_B2BS_BS_NAME, null);

        return _bookStore;
    }

    private transient BookPath _book;

    /**
     * Get the implicit join path to the <code>PUBLIC.BOOK</code> table.
     */
    public BookPath book() {
        if (_book == null)
            _book = new BookPath(this, Keys.FK_B2BS_B_ID, null);

        return _book;
    }

    @Override
    public BookToBookStore as(String alias) {
        return new BookToBookStore(DSL.name(alias), this);
    }

    @Override
    public BookToBookStore as(Name alias) {
        return new BookToBookStore(alias, this);
    }

    @Override
    public BookToBookStore as(Table<?> alias) {
        return new BookToBookStore(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BookToBookStore rename(String name) {
        return new BookToBookStore(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookToBookStore rename(Name name) {
        return new BookToBookStore(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BookToBookStore rename(Table<?> name) {
        return new BookToBookStore(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStore where(Condition condition) {
        return new BookToBookStore(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStore where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStore where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStore where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStore where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStore where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStore where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BookToBookStore where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStore whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BookToBookStore whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
