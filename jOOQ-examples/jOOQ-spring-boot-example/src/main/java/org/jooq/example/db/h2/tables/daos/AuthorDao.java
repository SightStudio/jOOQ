/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables.daos;


import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.example.db.h2.AbstractSpringDAOImpl;
import org.jooq.example.db.h2.tables.Author;
import org.jooq.example.db.h2.tables.records.AuthorRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class AuthorDao extends AbstractSpringDAOImpl<AuthorRecord, org.jooq.example.db.h2.tables.pojos.Author, Integer> {

    /**
     * Create a new AuthorDao without any configuration
     */
    public AuthorDao() {
        super(Author.AUTHOR, org.jooq.example.db.h2.tables.pojos.Author.class);
    }

    /**
     * Create a new AuthorDao with an attached configuration
     */
    @Autowired
    public AuthorDao(Configuration configuration) {
        super(Author.AUTHOR, org.jooq.example.db.h2.tables.pojos.Author.class, configuration);
    }

    @Override
    public Integer getId(org.jooq.example.db.h2.tables.pojos.Author object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Author.AUTHOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchById(Integer... values) {
        return fetch(Author.AUTHOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public org.jooq.example.db.h2.tables.pojos.Author fetchOneById(Integer value) {
        return fetchOne(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<org.jooq.example.db.h2.tables.pojos.Author> fetchOptionalById(Integer value) {
        return fetchOptional(Author.AUTHOR.ID, value);
    }

    /**
     * Fetch records that have <code>FIRST_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>FIRST_NAME IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchByFirstName(String... values) {
        return fetch(Author.AUTHOR.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>LAST_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LAST_NAME IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchByLastName(String... values) {
        return fetch(Author.AUTHOR.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>DATE_OF_BIRTH BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchRangeOfDateOfBirth(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Author.AUTHOR.DATE_OF_BIRTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DATE_OF_BIRTH IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchByDateOfBirth(LocalDate... values) {
        return fetch(Author.AUTHOR.DATE_OF_BIRTH, values);
    }

    /**
     * Fetch records that have <code>YEAR_OF_BIRTH BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchRangeOfYearOfBirth(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Author.AUTHOR.YEAR_OF_BIRTH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>YEAR_OF_BIRTH IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchByYearOfBirth(Integer... values) {
        return fetch(Author.AUTHOR.YEAR_OF_BIRTH, values);
    }

    /**
     * Fetch records that have <code>ADDRESS BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchRangeOfAddress(String lowerInclusive, String upperInclusive) {
        return fetchRange(Author.AUTHOR.ADDRESS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ADDRESS IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Author> fetchByAddress(String... values) {
        return fetch(Author.AUTHOR.ADDRESS, values);
    }
}
