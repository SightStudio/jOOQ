/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.example.db.h2.AbstractSpringDAOImpl;
import org.jooq.example.db.h2.tables.Book;
import org.jooq.example.db.h2.tables.records.BookRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class BookDao extends AbstractSpringDAOImpl<BookRecord, org.jooq.example.db.h2.tables.pojos.Book, Integer> {

    /**
     * Create a new BookDao without any configuration
     */
    public BookDao() {
        super(Book.BOOK, org.jooq.example.db.h2.tables.pojos.Book.class);
    }

    /**
     * Create a new BookDao with an attached configuration
     */
    @Autowired
    public BookDao(Configuration configuration) {
        super(Book.BOOK, org.jooq.example.db.h2.tables.pojos.Book.class, configuration);
    }

    @Override
    public Integer getId(org.jooq.example.db.h2.tables.pojos.Book object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchById(Integer... values) {
        return fetch(Book.BOOK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public org.jooq.example.db.h2.tables.pojos.Book fetchOneById(Integer value) {
        return fetchOne(Book.BOOK.ID, value);
    }

    /**
     * Fetch a unique record that has <code>ID = value</code>
     */
    public Optional<org.jooq.example.db.h2.tables.pojos.Book> fetchOptionalById(Integer value) {
        return fetchOptional(Book.BOOK.ID, value);
    }

    /**
     * Fetch records that have <code>AUTHOR_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfAuthorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>AUTHOR_ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByAuthorId(Integer... values) {
        return fetch(Book.BOOK.AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>CO_AUTHOR_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfCoAuthorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.CO_AUTHOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CO_AUTHOR_ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByCoAuthorId(Integer... values) {
        return fetch(Book.BOOK.CO_AUTHOR_ID, values);
    }

    /**
     * Fetch records that have <code>DETAILS_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfDetailsId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.DETAILS_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>DETAILS_ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByDetailsId(Integer... values) {
        return fetch(Book.BOOK.DETAILS_ID, values);
    }

    /**
     * Fetch records that have <code>TITLE BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>TITLE IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByTitle(String... values) {
        return fetch(Book.BOOK.TITLE, values);
    }

    /**
     * Fetch records that have <code>PUBLISHED_IN BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfPublishedIn(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.PUBLISHED_IN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>PUBLISHED_IN IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByPublishedIn(Integer... values) {
        return fetch(Book.BOOK.PUBLISHED_IN, values);
    }

    /**
     * Fetch records that have <code>LANGUAGE_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfLanguageId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.LANGUAGE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>LANGUAGE_ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByLanguageId(Integer... values) {
        return fetch(Book.BOOK.LANGUAGE_ID, values);
    }

    /**
     * Fetch records that have <code>CONTENT_TEXT BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfContentText(String lowerInclusive, String upperInclusive) {
        return fetchRange(Book.BOOK.CONTENT_TEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CONTENT_TEXT IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByContentText(String... values) {
        return fetch(Book.BOOK.CONTENT_TEXT, values);
    }

    /**
     * Fetch records that have <code>CONTENT_PDF BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfContentPdf(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Book.BOOK.CONTENT_PDF, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>CONTENT_PDF IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByContentPdf(byte[]... values) {
        return fetch(Book.BOOK.CONTENT_PDF, values);
    }

    /**
     * Fetch records that have <code>REC_VERSION BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfRecVersion(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Book.BOOK.REC_VERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REC_VERSION IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByRecVersion(Integer... values) {
        return fetch(Book.BOOK.REC_VERSION, values);
    }

    /**
     * Fetch records that have <code>REC_TIMESTAMP BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchRangeOfRecTimestamp(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Book.BOOK.REC_TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>REC_TIMESTAMP IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.Book> fetchByRecTimestamp(LocalDateTime... values) {
        return fetch(Book.BOOK.REC_TIMESTAMP, values);
    }
}
