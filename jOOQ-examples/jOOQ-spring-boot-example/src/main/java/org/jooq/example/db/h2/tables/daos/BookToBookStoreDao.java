/*
 * This file is generated by jOOQ.
 */
package org.jooq.example.db.h2.tables.daos;


import java.util.List;

import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.example.db.h2.AbstractSpringDAOImpl;
import org.jooq.example.db.h2.tables.BookToBookStore;
import org.jooq.example.db.h2.tables.records.BookToBookStoreRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class BookToBookStoreDao extends AbstractSpringDAOImpl<BookToBookStoreRecord, org.jooq.example.db.h2.tables.pojos.BookToBookStore, Record2<String, Integer>> {

    /**
     * Create a new BookToBookStoreDao without any configuration
     */
    public BookToBookStoreDao() {
        super(BookToBookStore.BOOK_TO_BOOK_STORE, org.jooq.example.db.h2.tables.pojos.BookToBookStore.class);
    }

    /**
     * Create a new BookToBookStoreDao with an attached configuration
     */
    @Autowired
    public BookToBookStoreDao(Configuration configuration) {
        super(BookToBookStore.BOOK_TO_BOOK_STORE, org.jooq.example.db.h2.tables.pojos.BookToBookStore.class, configuration);
    }

    @Override
    public Record2<String, Integer> getId(org.jooq.example.db.h2.tables.pojos.BookToBookStore object) {
        return compositeKeyRecord(object.getBookStoreName(), object.getBookId());
    }

    /**
     * Fetch records that have <code>BOOK_STORE_NAME BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.BookToBookStore> fetchRangeOfBookStoreName(String lowerInclusive, String upperInclusive) {
        return fetchRange(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>BOOK_STORE_NAME IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.BookToBookStore> fetchByBookStoreName(String... values) {
        return fetch(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_STORE_NAME, values);
    }

    /**
     * Fetch records that have <code>BOOK_ID BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.BookToBookStore> fetchRangeOfBookId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>BOOK_ID IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.BookToBookStore> fetchByBookId(Integer... values) {
        return fetch(BookToBookStore.BOOK_TO_BOOK_STORE.BOOK_ID, values);
    }

    /**
     * Fetch records that have <code>STOCK BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.BookToBookStore> fetchRangeOfStock(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(BookToBookStore.BOOK_TO_BOOK_STORE.STOCK, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>STOCK IN (values)</code>
     */
    public List<org.jooq.example.db.h2.tables.pojos.BookToBookStore> fetchByStock(Integer... values) {
        return fetch(BookToBookStore.BOOK_TO_BOOK_STORE.STOCK, values);
    }
}
